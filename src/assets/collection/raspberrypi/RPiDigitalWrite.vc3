{"editor":{"id":"8851523d-1bb4-40f8-8213-27f0432164e7","offsetX":37,"offsetY":-94,"zoom":100,"gridSize":0,"layers":[{"id":"aed19e3a-fd87-46b1-a2f2-69e97b97bb65","type":"diagram-links","isSvg":true,"transformed":true,"models":{"90df74ca-7a0c-486b-80a8-5725e07b8ee8":{"id":"90df74ca-7a0c-486b-80a8-5725e07b8ee8","type":"default","selected":false,"source":"0002-c04e23ed-83b5-464b-95d3-40dd476f826e","sourcePort":"92ab1ad1-e87f-4128-aeda-c7057fe3ba65","target":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","targetPort":"0f0d549e-0c60-48e7-9c61-64a414d314d7","points":[{"id":"94123c54-591b-44c8-b783-dfc42da57fe6","type":"point","x":962,"y":334.5},{"id":"5ec582b0-56fe-4194-afd8-8993f7e2eb76","type":"point","x":963.6953125,"y":505.5}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"5c7a26a0-0b7c-4dae-88c7-6ddf299300ea":{"id":"5c7a26a0-0b7c-4dae-88c7-6ddf299300ea","type":"default","selected":false,"source":"537020f8-c608-4086-aa4e-21fdc2784f66","sourcePort":"b508cc47-64bb-4993-9df9-caac8f00a8d0","target":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","targetPort":"704824fc-2b83-463e-a171-fa50c63232d0","points":[{"id":"1e63f60c-4d92-490f-9945-ddb58a090454","type":"point","x":544.5,"y":665.5},{"id":"ac3e9b29-ae4d-4e24-976b-1236e3e4909d","type":"point","x":597.5,"y":657.328125}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"},"abc5bc6a-c827-4438-a22a-39eafda52dbc":{"id":"abc5bc6a-c827-4438-a22a-39eafda52dbc","type":"default","selected":false,"source":"1b5eaeb4-edfd-4396-afa0-039c63fe5a38","sourcePort":"a12bd16a-8db3-4977-8510-ae3784c365d1","target":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","targetPort":"e22bc218-9411-4e24-b5de-218bacecf083","points":[{"id":"6e87f732-f4d4-448b-b4b4-9da577b9a6ee","type":"point","x":540.5,"y":817.5},{"id":"55a39b4a-c0af-4cae-8c41-8976d65b828c","type":"point","x":597.5,"y":809.15625}],"labels":[],"width":3,"color":"gray","curvyness":50,"selectedColor":"rgb(0,192,255)"}}},{"id":"a0a371cf-f1f6-41f7-add4-e76e94aa4ea6","type":"diagram-nodes","isSvg":false,"transformed":true,"models":{"0002-c04e23ed-83b5-464b-95d3-40dd476f826e":{"id":"0002-c04e23ed-83b5-464b-95d3-40dd476f826e","type":"basic.constant","selected":true,"x":901,"y":218,"ports":[{"id":"92ab1ad1-e87f-4128-aeda-c7057fe3ba65","type":"port.output","x":954.5,"y":327,"name":"constant-out","alignment":"bottom","parentNode":"0002-c04e23ed-83b5-464b-95d3-40dd476f826e","links":["90df74ca-7a0c-486b-80a8-5725e07b8ee8"],"in":false,"label":"PinNumbers","hideLabel":true}],"data":{"name":"PinNumbers","value":"18,19,20,21","local":true}},"3bb4932b-7e79-48c9-9e05-e3532cd52d3e":{"id":"3bb4932b-7e79-48c9-9e05-e3532cd52d3e","type":"basic.input","selected":false,"x":600,"y":453,"ports":[{"id":"4168b77e-5247-4d3b-864d-fe57cea2a19e","type":"port.output","x":686,"y":474,"name":"input-out","alignment":"right","parentNode":"3bb4932b-7e79-48c9-9e05-e3532cd52d3e","links":[],"in":false,"label":"States","hideLabel":true}],"data":{"name":"States"}},"45493c4c-daa5-41c7-9c7c-d56bf4e858ef":{"id":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","type":"basic.code","selected":false,"x":588,"y":424,"ports":[{"id":"704824fc-2b83-463e-a171-fa50c63232d0","type":"port.input","x":590,"y":649.828125,"name":"Enable","alignment":"left","parentNode":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","links":["5c7a26a0-0b7c-4dae-88c7-6ddf299300ea"],"in":true,"label":"Enable","hideLabel":false},{"id":"e22bc218-9411-4e24-b5de-218bacecf083","type":"port.input","x":590,"y":801.65625,"name":"States","alignment":"left","parentNode":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","links":["abc5bc6a-c827-4438-a22a-39eafda52dbc"],"in":true,"label":"States","hideLabel":false},{"id":"0f0d549e-0c60-48e7-9c61-64a414d314d7","type":"port.parameter","x":956.1953125,"y":498,"name":"PinNumbers","alignment":"top","parentNode":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","links":["90df74ca-7a0c-486b-80a8-5725e07b8ee8"],"in":true,"label":"PinNumbers","hideLabel":false}],"data":{"code":"import RPi.GPIO as GPIO\nimport time\nfrom typing import List, Union\n\nfrom lib.utils import Synchronise\nfrom lib.inputs import Inputs\nfrom lib.outputs import Outputs\nfrom lib.parameters import Parameters\n\n\ndef setup_gpio_pins(pin_numbers: List[int]) -> None:\n    \"\"\"Setup GPIO pins for digital output.\"\"\"\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    \n    for pin in pin_numbers:\n        GPIO.setup(pin, GPIO.OUT, initial=GPIO.LOW)\n\n\ndef write_digital_pin(pin: int, state: Union[int, bool]) -> None:\n    \"\"\"\n    Write digital state to a GPIO pin.\n    \n    Args:\n        pin: GPIO pin number\n        state: Digital state (0/1 or True/False)\n    \"\"\"\n    gpio_state = GPIO.HIGH if state else GPIO.LOW\n    GPIO.output(pin, gpio_state)\n\n\ndef write_multiple_pins(pins: List[int], states: List[Union[int, bool]]) -> None:\n    \"\"\"\n    Write digital states to multiple GPIO pins.\n    \n    Args:\n        pins: List of GPIO pin numbers\n        states: List of digital states corresponding to pins\n    \"\"\"\n    for pin, state in zip(pins, states):\n        write_digital_pin(pin, state)\n\n\ndef main(inputs: Inputs, outputs: Outputs, parameters: Parameters, synchronise: Synchronise) -> None:\n    \"\"\"\n    Main function for Raspberry Pi digital write operation.\n    Reads digital states from inputs and writes them to GPIO pins.\n    \"\"\"\n    # Read pin configuration\n    pin_numbers_str = parameters.read_string(\"PinNumbers\")  # e.g., \"18,19,20,21\"\n    \n    # Parse pin numbers\n    try:\n        pin_numbers = [int(pin.strip()) for pin in pin_numbers_str.split(',') if pin.strip()]\n    except (ValueError, AttributeError):\n        print(\"Invalid pin numbers format\")\n        return\n    \n    if not pin_numbers:\n        print(\"No pins specified\")\n        return\n    \n    # Setup GPIO\n    try:\n        setup_gpio_pins(pin_numbers)\n    except Exception as e:\n        print(f\"GPIO setup failed: {e}\")\n        return\n    \n    # Check enable input\n    auto_enable = False\n    try:\n        enable = inputs.read_number(\"Enable\")\n    except Exception:\n        auto_enable = True\n    \n    try:\n        while auto_enable or inputs.read_number('Enable'):\n            try:\n                # Read digital states array\n                digital_states = inputs.read_array(\"DigitalStates\")\n                \n                if digital_states is not None and len(digital_states) == len(pin_numbers):\n                    # Write states to pins\n                    write_multiple_pins(pin_numbers, digital_states)\n                \n            except Exception:\n                # If array read fails, try individual pin reads\n                states = []\n                for i, pin in enumerate(pin_numbers):\n                    try:\n                        state = inputs.read_number(f\"Pin{pin}\")\n                        states.append(state if state is not None else 0)\n                    except Exception:\n                        states.append(0)\n                \n                if states:\n                    write_multiple_pins(pin_numbers, states)\n            \n            synchronise()\n            \n    except KeyboardInterrupt:\n        pass\n    finally:\n        GPIO.cleanup()","aiDescription":"","frequency":"30","params":[{"name":"PinNumbers"}],"ports":{"in":[{"name":"Enable"},{"name":"States"}],"out":[]},"size":{"width":"685px","height":"679px"}}},"1b5eaeb4-edfd-4396-afa0-039c63fe5a38":{"id":"1b5eaeb4-edfd-4396-afa0-039c63fe5a38","type":"basic.input","selected":false,"x":447,"y":789,"ports":[{"id":"a12bd16a-8db3-4977-8510-ae3784c365d1","type":"port.output","x":533,"y":810,"name":"input-out","alignment":"right","parentNode":"1b5eaeb4-edfd-4396-afa0-039c63fe5a38","links":["abc5bc6a-c827-4438-a22a-39eafda52dbc"],"in":false,"label":"States","hideLabel":true}],"data":{"name":"States"}},"537020f8-c608-4086-aa4e-21fdc2784f66":{"id":"537020f8-c608-4086-aa4e-21fdc2784f66","type":"basic.input","selected":false,"x":451,"y":637,"ports":[{"id":"b508cc47-64bb-4993-9df9-caac8f00a8d0","type":"port.output","x":537,"y":658,"name":"input-out","alignment":"right","parentNode":"537020f8-c608-4086-aa4e-21fdc2784f66","links":["5c7a26a0-0b7c-4dae-88c7-6ddf299300ea"],"in":false,"label":"Enable","hideLabel":true}],"data":{"name":"Enable"}}}}]},"version":"3.0","package":{"name":"RaspberrPIDigitalWrite","version":"v0.0.1","description":"Raspberry PI Digital Write","author":"harunkurtdev","image":""},"design":{"board":"Python3-Noetic","graph":{"blocks":[{"id":"0002-c04e23ed-83b5-464b-95d3-40dd476f826e","type":"basic.constant","data":{"name":"PinNumbers","value":"18,19,20,21","local":true},"position":{"x":901,"y":218}},{"id":"3bb4932b-7e79-48c9-9e05-e3532cd52d3e","type":"basic.input","data":{"name":"States"},"position":{"x":600,"y":453}},{"id":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","type":"basic.code","data":{"code":"import RPi.GPIO as GPIO\nimport time\nfrom typing import List, Union\n\nfrom lib.utils import Synchronise\nfrom lib.inputs import Inputs\nfrom lib.outputs import Outputs\nfrom lib.parameters import Parameters\n\n\ndef setup_gpio_pins(pin_numbers: List[int]) -> None:\n    \"\"\"Setup GPIO pins for digital output.\"\"\"\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    \n    for pin in pin_numbers:\n        GPIO.setup(pin, GPIO.OUT, initial=GPIO.LOW)\n\n\ndef write_digital_pin(pin: int, state: Union[int, bool]) -> None:\n    \"\"\"\n    Write digital state to a GPIO pin.\n    \n    Args:\n        pin: GPIO pin number\n        state: Digital state (0/1 or True/False)\n    \"\"\"\n    gpio_state = GPIO.HIGH if state else GPIO.LOW\n    GPIO.output(pin, gpio_state)\n\n\ndef write_multiple_pins(pins: List[int], states: List[Union[int, bool]]) -> None:\n    \"\"\"\n    Write digital states to multiple GPIO pins.\n    \n    Args:\n        pins: List of GPIO pin numbers\n        states: List of digital states corresponding to pins\n    \"\"\"\n    for pin, state in zip(pins, states):\n        write_digital_pin(pin, state)\n\n\ndef main(inputs: Inputs, outputs: Outputs, parameters: Parameters, synchronise: Synchronise) -> None:\n    \"\"\"\n    Main function for Raspberry Pi digital write operation.\n    Reads digital states from inputs and writes them to GPIO pins.\n    \"\"\"\n    # Read pin configuration\n    pin_numbers_str = parameters.read_string(\"PinNumbers\")  # e.g., \"18,19,20,21\"\n    \n    # Parse pin numbers\n    try:\n        pin_numbers = [int(pin.strip()) for pin in pin_numbers_str.split(',') if pin.strip()]\n    except (ValueError, AttributeError):\n        print(\"Invalid pin numbers format\")\n        return\n    \n    if not pin_numbers:\n        print(\"No pins specified\")\n        return\n    \n    # Setup GPIO\n    try:\n        setup_gpio_pins(pin_numbers)\n    except Exception as e:\n        print(f\"GPIO setup failed: {e}\")\n        return\n    \n    # Check enable input\n    auto_enable = False\n    try:\n        enable = inputs.read_number(\"Enable\")\n    except Exception:\n        auto_enable = True\n    \n    try:\n        while auto_enable or inputs.read_number('Enable'):\n            try:\n                # Read digital states array\n                digital_states = inputs.read_array(\"DigitalStates\")\n                \n                if digital_states is not None and len(digital_states) == len(pin_numbers):\n                    # Write states to pins\n                    write_multiple_pins(pin_numbers, digital_states)\n                \n            except Exception:\n                # If array read fails, try individual pin reads\n                states = []\n                for i, pin in enumerate(pin_numbers):\n                    try:\n                        state = inputs.read_number(f\"Pin{pin}\")\n                        states.append(state if state is not None else 0)\n                    except Exception:\n                        states.append(0)\n                \n                if states:\n                    write_multiple_pins(pin_numbers, states)\n            \n            synchronise()\n            \n    except KeyboardInterrupt:\n        pass\n    finally:\n        GPIO.cleanup()","aiDescription":"","frequency":"30","params":[{"name":"PinNumbers"}],"ports":{"in":[{"name":"Enable"},{"name":"States"}],"out":[]},"size":{"width":"685px","height":"679px"}},"position":{"x":588,"y":424}},{"id":"1b5eaeb4-edfd-4396-afa0-039c63fe5a38","type":"basic.input","data":{"name":"States"},"position":{"x":447,"y":789}},{"id":"537020f8-c608-4086-aa4e-21fdc2784f66","type":"basic.input","data":{"name":"Enable"},"position":{"x":451,"y":637}}],"wires":[{"source":{"block":"0002-c04e23ed-83b5-464b-95d3-40dd476f826e","port":"constant-out","name":"PinNumbers"},"target":{"block":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","port":"PinNumbers","name":"PinNumbers"}},{"source":{"block":"537020f8-c608-4086-aa4e-21fdc2784f66","port":"input-out","name":"Enable"},"target":{"block":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","port":"Enable","name":"Enable"}},{"source":{"block":"1b5eaeb4-edfd-4396-afa0-039c63fe5a38","port":"input-out","name":"States"},"target":{"block":"45493c4c-daa5-41c7-9c7c-d56bf4e858ef","port":"States","name":"States"}}]}},"dependencies":{}}